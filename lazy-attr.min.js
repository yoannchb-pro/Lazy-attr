window.lazyDatas={updateURL:"https://cdn.jsdelivr.net/gh/yoannchb-pro/lazy-attr@latest/lazy-attr.min.js"},window.lazy=(()=>{return{_data:window.lazyDatas,changeAnimation:(t,e,n=!1)=>{let i=t.getAttribute("lazy-reset");if(i=null!=i&&null!=i){let i=t.getAttribute("lazy-animation");if(i&&e){let e=t.getAttribute("lazy-animation-pointer");e?document.querySelectorAll(e).forEach(t=>{t.classList.remove(i)}):t.classList.remove(i),t.removeAttribute("lazy-animation")}t.setAttribute("lazy-animation",e),n&&(window.lazy()._data.observer.unobserve(t),window.lazy()._data.observer.observe(t))}else console.warn("Lazy-attr : Cannot change animation of not lazy-reset element !")},getLastVersion:()=>new Promise(async(t,e)=>{let n=window.lazyDatas.updateURL,i=await fetch(n).catch(t=>e({error:!0})),o=await i.text().catch(t=>e({error:!0})),a=document.createElement("iframe");a.style.display="none",document.body.appendChild(a);let r=document.createElement("script");r.innerHTML=o,a.contentWindow.console={},a.contentWindow.document.body.appendChild(r),t({version:a.contentWindow.window.lazy().version})}),parameters:["[lazy-reset]","[lazy-animation]","[lazy-animation-time]","[lazy-animation-delay]","[lazy-src]","[lazy-video]","[lazy-embed]","[lazy-animation-pointer]","[lazy-animation-function]","[lazy-animation-count]"],animations:["zoomin","zoomout","opacity","slide-left","slide-right","slide-bottom","slide-top","corner-top-left","corner-top-right","corner-bottom-left","corner-bottom-right","shake","rotate","blur","flip","flip-up"],options:{root:null,rootMargin:"0px",threshold:0},version:"1.0.7"}}),window.addEventListener("load",async()=>{let t=await window.lazy().getLastVersion();if(t.error)console.error("Lazzy-attr : error while fetching to see for update !");else try{let e=t.version,n=window.lazy().version,i=e===n,o=e<n;e>n&&console.warn(`Lazzy-attr : new version ${e} available !`),i&&console.info(`Lazy-attr : you have the latest version ${n}`),o&&console.warn(`Lazzy-attr : ${n} is not a valid version !`)}catch(t){}}),window.IntersectionObserver||(window.IntersectionObserver=class{constructor(t,e){this.callback=t,this.elements=[],this.init()}init(){const t=this,e=()=>{const e=window.scrollX,n=window.scrollY,i=[];t.elements.forEach(t=>{let o=!1,a=document.body.getBoundingClientRect(),r=t.getBoundingClientRect(),l=!1,s=!1,d=r.top-a.top,c=r.bottom-a.bottom,y=r.right-a.right,m=r.left-a.left,u=d>=n&&d<=n+window.innerHeight,w=c<=n+window.innerHeight&&c>=n,b=m>=e&&m<=e+window.innerWidth,z=y<=e+window.innerWidth&&y>=e;(u||w)&&(s=!0),(b||z)&&(l=!0),l&&s&&(o=!0),i.push({target:t,isIntersecting:o})}),this.callback(i,t)};this.listener=e,window.addEventListener("scroll",e)}observe(t){t&&(this.elements.push(t),this.listener())}unobserve(t){if(t){let e=this.elements.indexOf(t);-1!=e&&(this.elements.splice(e,1),this.listener())}}}),window.addEventListener("load",()=>{const t=t=>console.error(`[ERROR] Lazy-attr : ${t}`);let e=(e,n)=>{e.forEach(e=>{const i=e.target;if(e.isIntersecting){const e=(t,e)=>{t.style.animationPlayState=e,t.style.webkitAnimationPlayState=e},o=(t,e)=>{let n=i.getAttribute("lazy-animation-time");n&&(t.style.animationDuration=`${n}s`,t.style.webkitAnimationDuration=`${n}s`);let o=i.getAttribute("lazy-animation-delay");o&&(t.style.animationDelay=`${o}s`,t.style.webkitAnimationDelay=`${o}s`);let a=i.getAttribute("lazy-animation-count");a&&(t.style.animationIterationCount=a,t.style.webkitAnimationIterationCount=a);let r=i.getAttribute("lazy-animation-function");r&&(t.style.animationTimingFunction=r,t.style.webkitAnimationTimingFunction=r),t.classList.add(e)},a=[];let r=i.getAttribute("lazy-animation"),l=i.getAttribute("lazy-animation-pointer");if(l&&r){document.querySelectorAll(l).forEach(t=>{o(t,r),e(t,"paused"),a.push(t)})}else r&&(o(i,r),e(i,"paused"),a.push(i));const s=()=>{a.forEach(t=>{e(t,"running")}),null===i.getAttribute("lazy-reset")&&i.removeAttribute("lazy-animation")};let d=i.complete&&0!==i.naturalHeight,c=i.readyState>=0;d||c||!i.getAttribute("lazy-src")?s():(i.addEventListener("error",()=>{s(),t("cannot load url "+i.src)}),i.addEventListener("load",s));let y=i.getAttribute("lazy-video");y&&i.setAttribute("poster",y),i.preload="none";let m=i.getAttribute("lazy-embed");if(m){let t=i.getAttribute("lazy-poster");t=t?`url('${t}')`:"#000",i.setAttribute("srcdoc",`<style>body{background: ${t}; background-position: center; background-size: cover;}*{padding:0;margin:0;overflow:hidden}html,body{height:100%}img,span{position:absolute;width:100%;top:0;bottom:0;margin:auto}span{height:1.5em;text-align:center;font:48px/1.5 sans-serif;color:white;text-shadow:0 0 0.5em black}</style>\n                    <a href='${m}'><span>â–¶</span></a>`)}let u=i.getAttribute("lazy-src");u&&(i.src=u),i.removeAttribute("lazy-embed"),i.removeAttribute("lazy-poster"),i.removeAttribute("lazy-video"),i.removeAttribute("lazy-animation-time"),i.removeAttribute("lazy-src"),null===i.getAttribute("lazy-reset")&&n.unobserve(i)}else if(null!=i.getAttribute("lazy-reset")){const t=(t,e=!1)=>{e&&t.classList.remove(e)};let e=i.getAttribute("lazy-animation"),n=i.getAttribute("lazy-animation-pointer");if(n&&e){document.querySelectorAll(n).forEach(n=>{t(n,e)})}else t(i,e)}})};if(window.IntersectionObserver&&window.lazy()&&window.lazyDatas){let t=new IntersectionObserver(e,window.lazy().options);window.lazyDatas.observer=t;const n=()=>{document.body.querySelectorAll(window.lazy().parameters.join(",")).forEach(e=>{t.observe(e)})};document.addEventListener("DOMNodeInserted",n),document.addEventListener("change",n),n(),(t=>console.info(`[INFO] Lazy-attr : ${t}`))("version "+window.lazy().version)}else t("incompatible or verify window.lazy and window.lazyDatas integration")});